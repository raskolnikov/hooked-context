{"version":3,"sources":["logo.svg","components/Header.js","components/Card.js","components/Home.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","id","href","className","Card","song","src","albumArt","alt","name","artist","initialState","songs","isFetching","hasError","reducer","state","action","type","payload","Home","authState","useContext","AuthContext","useReducer","dispatch","useState","fetch","headers","Authorization","token","then","res","ok","json","resJson","console","log","catch","error","Fragment","length","map","key","toString","email","password","isSubmitting","errorMessage","Login","React","data","setData","handleInputChange","event","target","value","onSubmit","preventDefault","method","body","JSON","stringify","username","message","statusText","htmlFor","onChange","disabled","createContext","isAuthenticated","user","localStorage","setItem","clear","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21ce2890.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nexport const Header = () => {\n  return (\n    <nav id=\"navigation\">\n      <h1 href=\"#\" className=\"logo\">\n        HOOKED\n      </h1>\n    </nav>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nconst Card = ({ song }) => {\n\n    return (\n        <div className=\"card\">\n            <img\n                src={song.albumArt}\n                alt=\"\"\n            />\n            <div className=\"content\">\n                <h2>{song.name}</h2>\n                <span>BY: {song.artist}</span>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Card;","import React, { useReducer, useContext, useState } from 'react';\nimport Card from './Card';\nimport { AuthContext } from '../App';\n\nconst initialState = {\n\n    songs: [],\n    isFetching: false,\n    hasError: false\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"FETCH_SONGS_REQUEST\":\n            return {\n                ...state,\n                isFetching: true,\n                hasError: false\n            };\n        case \"FETCH_SONGS_SUCCESS\":\n            return {\n                ...state,\n                isFetching: false,\n                songs: action.payload\n            };\n        case \"FETCH_SONGS_FAILURE\":\n            return {\n                ...state,\n                hasError: true,\n                isFetching: false\n            };\n        default:\n            return state;\n    }\n};\n\nconst Home = () => {\n\n    const { state: authState } = useContext(AuthContext);\n\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useState(() => {\n        dispatch({\n            type: \"FETCH_SONGS_REQUEST\"\n        });\n\n        fetch(\"https://hookedbe.herokuapp.com/api/songs\", {\n            headers: {\n                Authorization: `Bearer ${authState.token}`\n            }\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    throw res;\n                }\n            })\n            .then(resJson => {\n                console.log(resJson);\n                dispatch({\n                    type: \"FETCH_SONGS_SUCCESS\",\n                    payload: resJson\n                });\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch({\n                    type: \"FETCH_SONGS_FAILURE\"\n                });\n            });\n\n    }, [authState.token])\n\n\n    return (\n\n        <React.Fragment>\n            <div className=\"home\">\n                {state.isFetching ? (\n                    <span className=\"loader\">LOADING...</span>\n                ) : state.hasError ? (\n                    <span className=\"error\">AN ERROR HAS OCCURED</span>\n                ) : (\n                            <>\n                                {state.songs.length > 0 &&\n                                    state.songs.map(song => (\n                                        <Card key={song.id.toString()} song={song} />\n                                    ))}\n                            </>\n                        )}\n            </div>\n        </React.Fragment>\n\n    )\n\n}\n\nexport default Home;","import React, { useState } from \"react\";\nimport logo from \"../logo.svg\"\nimport { AuthContext } from \"../App\";\n\nconst initialState = {\n\n    email: \"\",\n    password: \"\",\n    isSubmitting: false,\n    errorMessage: null\n\n}\nconst Login = () => {\n\n    const { dispatch } = React.useContext(AuthContext);\n\n    const [data, setData] = useState(initialState);\n\n    const handleInputChange = event => {\n\n\n        setData({\n\n            ...data,\n            [event.target.name]: event.target.value\n\n        })\n\n    }\n\n    const handleFormSubmit = event => {\n\n        event.preventDefault();\n\n        setData({\n            ...data,\n            isSubmitting: true,\n            errorMessage: null\n\n        })\n\n        fetch(\"https://hookedbe.herokuapp.com/api/login\", {\n            method: \"post\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                username: data.email,\n                password: data.password\n            })\n        }).then(res => {\n            if (res.ok) {\n                return res.json();\n            }\n            throw res;\n        }).then(resJson => {\n            dispatch({\n                type: \"LOGIN\",\n                payload: resJson\n            })\n        })\n            .catch(error => {\n                setData({\n                    ...data,\n                    isSubmitting: false,\n                    errorMessage: error.message || error.statusText\n                });\n            });\n\n    }\n\n\n\n\n    return (\n\n        <div className=\"login-container\">\n            <div className=\"card\">\n                <div className=\"container\">\n                    <form onSubmit={handleFormSubmit}>\n                        <h1>Login</h1>\n\n                        <label htmlFor=\"email\">\n                            Email Address\n              <input\n                                type=\"text\"\n                                value={data.email}\n                                onChange={handleInputChange}\n                                name=\"email\"\n                                id=\"email\"\n                            />\n                        </label>\n\n                        <label htmlFor=\"password\">\n                            Password\n              <input\n                                type=\"password\"\n                                value={data.password}\n                                onChange={handleInputChange}\n                                name=\"password\"\n                                id=\"password\"\n                            />\n                        </label>\n\n                        {data.errorMessage && (\n                            <span className=\"form-error\">{data.errorMessage}</span>\n                        )}\n\n                        <button disabled={data.isSubmitting}>\n                            {data.isSubmitting ? (\n                                \"Loading...\"\n                            ) : (\n                                    \"Login\"\n                                )}\n                        </button>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Login;\n\n\n","import React, { useReducer } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Login from './components/Login';\n\nexport const AuthContext = React.createContext();\n\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n};\n\nconst reducer = (state, action) => {\n\n  switch (action.type) {\n\n    case \"LOGIN\":\n\n      localStorage.setItem(\"user\", JSON.stringify(action.payload.user));\n      localStorage.setItem(\"token\", JSON.stringify(action.payload.token));\n\n      return {\n        ...state,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token\n      };\n    case \"LOGOUT\":\n      localStorage.clear();\n\n      return {\n        ...state,\n        isAuthenticated: false,\n        user: null,\n        token: null\n      }\n\n    default:\n      return state;\n\n  }\n\n}\n\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AuthContext.Provider value={{ state, dispatch }}>\n      <Header />\n      <div className=\"App\">{!state.isAuthenticated ? <Login /> : <Home />}  </div>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}